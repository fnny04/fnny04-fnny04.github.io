"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ts-pattern";
exports.ids = ["vendor-chunks/ts-pattern"];
exports.modules = {

/***/ "(ssr)/./node_modules/ts-pattern/dist/index.js":
/*!***********************************************!*\
  !*** ./node_modules/ts-pattern/dist/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   P: () => (/* binding */ _),\n/* harmony export */   Pattern: () => (/* binding */ _),\n/* harmony export */   isMatching: () => (/* binding */ a),\n/* harmony export */   match: () => (/* binding */ N)\n/* harmony export */ });\nconst t = Symbol.for(\"@ts-pattern/matcher\"), e = Symbol.for(\"@ts-pattern/isVariadic\"), n = \"@ts-pattern/anonymous-select-key\", r = (t)=>Boolean(t && \"object\" == typeof t), i = (e)=>e && !!e[t], s = (n, o, c)=>{\n    if (i(n)) {\n        const e = n[t](), { matched: r, selections: i } = e.match(o);\n        return r && i && Object.keys(i).forEach((t)=>c(t, i[t])), r;\n    }\n    if (r(n)) {\n        if (!r(o)) return !1;\n        if (Array.isArray(n)) {\n            if (!Array.isArray(o)) return !1;\n            let t = [], r = [], a = [];\n            for (const s of n.keys()){\n                const o = n[s];\n                i(o) && o[e] ? a.push(o) : a.length ? r.push(o) : t.push(o);\n            }\n            if (a.length) {\n                if (a.length > 1) throw new Error(\"Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.\");\n                if (o.length < t.length + r.length) return !1;\n                const e = o.slice(0, t.length), n = 0 === r.length ? [] : o.slice(-r.length), i = o.slice(t.length, 0 === r.length ? Infinity : -r.length);\n                return t.every((t, n)=>s(t, e[n], c)) && r.every((t, e)=>s(t, n[e], c)) && (0 === a.length || s(a[0], i, c));\n            }\n            return n.length === o.length && n.every((t, e)=>s(t, o[e], c));\n        }\n        return Object.keys(n).every((e)=>{\n            const r = n[e];\n            return (e in o || i(a = r) && \"optional\" === a[t]().matcherType) && s(r, o[e], c);\n            var a;\n        });\n    }\n    return Object.is(o, n);\n}, o = (e)=>{\n    var n, s, a;\n    return r(e) ? i(e) ? null != (n = null == (s = (a = e[t]()).getSelectionKeys) ? void 0 : s.call(a)) ? n : [] : Array.isArray(e) ? c(e, o) : c(Object.values(e), o) : [];\n}, c = (t, e)=>t.reduce((t, n)=>t.concat(e(n)), []);\nfunction a(...t) {\n    if (1 === t.length) {\n        const [e] = t;\n        return (t)=>s(e, t, ()=>{});\n    }\n    if (2 === t.length) {\n        const [e, n] = t;\n        return s(e, n, ()=>{});\n    }\n    throw new Error(`isMatching wasn't given the right number of arguments: expected 1 or 2, received ${t.length}.`);\n}\nfunction u(t) {\n    return Object.assign(t, {\n        optional: ()=>l(t),\n        and: (e)=>m(t, e),\n        or: (e)=>y(t, e),\n        select: (e)=>void 0 === e ? p(t) : p(e, t)\n    });\n}\nfunction h(t) {\n    return Object.assign(((t)=>Object.assign(t, {\n            *[Symbol.iterator] () {\n                yield Object.assign(t, {\n                    [e]: !0\n                });\n            }\n        }))(t), {\n        optional: ()=>h(l(t)),\n        select: (e)=>h(void 0 === e ? p(t) : p(e, t))\n    });\n}\nfunction l(e) {\n    return u({\n        [t]: ()=>({\n                match: (t)=>{\n                    let n = {};\n                    const r = (t, e)=>{\n                        n[t] = e;\n                    };\n                    return void 0 === t ? (o(e).forEach((t)=>r(t, void 0)), {\n                        matched: !0,\n                        selections: n\n                    }) : {\n                        matched: s(e, t, r),\n                        selections: n\n                    };\n                },\n                getSelectionKeys: ()=>o(e),\n                matcherType: \"optional\"\n            })\n    });\n}\nconst f = (t, e)=>{\n    for (const n of t)if (!e(n)) return !1;\n    return !0;\n}, g = (t, e)=>{\n    for (const [n, r] of t.entries())if (!e(r, n)) return !1;\n    return !0;\n};\nfunction m(...e) {\n    return u({\n        [t]: ()=>({\n                match: (t)=>{\n                    let n = {};\n                    const r = (t, e)=>{\n                        n[t] = e;\n                    };\n                    return {\n                        matched: e.every((e)=>s(e, t, r)),\n                        selections: n\n                    };\n                },\n                getSelectionKeys: ()=>c(e, o),\n                matcherType: \"and\"\n            })\n    });\n}\nfunction y(...e) {\n    return u({\n        [t]: ()=>({\n                match: (t)=>{\n                    let n = {};\n                    const r = (t, e)=>{\n                        n[t] = e;\n                    };\n                    return c(e, o).forEach((t)=>r(t, void 0)), {\n                        matched: e.some((e)=>s(e, t, r)),\n                        selections: n\n                    };\n                },\n                getSelectionKeys: ()=>c(e, o),\n                matcherType: \"or\"\n            })\n    });\n}\nfunction d(e) {\n    return {\n        [t]: ()=>({\n                match: (t)=>({\n                        matched: Boolean(e(t))\n                    })\n            })\n    };\n}\nfunction p(...e) {\n    const r = \"string\" == typeof e[0] ? e[0] : void 0, i = 2 === e.length ? e[1] : \"string\" == typeof e[0] ? void 0 : e[0];\n    return u({\n        [t]: ()=>({\n                match: (t)=>{\n                    let e = {\n                        [null != r ? r : n]: t\n                    };\n                    return {\n                        matched: void 0 === i || s(i, t, (t, n)=>{\n                            e[t] = n;\n                        }),\n                        selections: e\n                    };\n                },\n                getSelectionKeys: ()=>[\n                        null != r ? r : n\n                    ].concat(void 0 === i ? [] : o(i))\n            })\n    });\n}\nfunction v(t) {\n    return \"number\" == typeof t;\n}\nfunction b(t) {\n    return \"string\" == typeof t;\n}\nfunction w(t) {\n    return \"bigint\" == typeof t;\n}\nconst S = u(d(function(t) {\n    return !0;\n})), O = S, j = (t)=>Object.assign(u(t), {\n        startsWith: (e)=>{\n            return j(m(t, (n = e, d((t)=>b(t) && t.startsWith(n)))));\n            var n;\n        },\n        endsWith: (e)=>{\n            return j(m(t, (n = e, d((t)=>b(t) && t.endsWith(n)))));\n            var n;\n        },\n        minLength: (e)=>j(m(t, ((t)=>d((e)=>b(e) && e.length >= t))(e))),\n        maxLength: (e)=>j(m(t, ((t)=>d((e)=>b(e) && e.length <= t))(e))),\n        includes: (e)=>{\n            return j(m(t, (n = e, d((t)=>b(t) && t.includes(n)))));\n            var n;\n        },\n        regex: (e)=>{\n            return j(m(t, (n = e, d((t)=>b(t) && Boolean(t.match(n))))));\n            var n;\n        }\n    }), E = j(d(b)), K = (t)=>Object.assign(u(t), {\n        between: (e, n)=>K(m(t, ((t, e)=>d((n)=>v(n) && t <= n && e >= n))(e, n))),\n        lt: (e)=>K(m(t, ((t)=>d((e)=>v(e) && e < t))(e))),\n        gt: (e)=>K(m(t, ((t)=>d((e)=>v(e) && e > t))(e))),\n        lte: (e)=>K(m(t, ((t)=>d((e)=>v(e) && e <= t))(e))),\n        gte: (e)=>K(m(t, ((t)=>d((e)=>v(e) && e >= t))(e))),\n        int: ()=>K(m(t, d((t)=>v(t) && Number.isInteger(t)))),\n        finite: ()=>K(m(t, d((t)=>v(t) && Number.isFinite(t)))),\n        positive: ()=>K(m(t, d((t)=>v(t) && t > 0))),\n        negative: ()=>K(m(t, d((t)=>v(t) && t < 0)))\n    }), A = K(d(v)), x = (t)=>Object.assign(u(t), {\n        between: (e, n)=>x(m(t, ((t, e)=>d((n)=>w(n) && t <= n && e >= n))(e, n))),\n        lt: (e)=>x(m(t, ((t)=>d((e)=>w(e) && e < t))(e))),\n        gt: (e)=>x(m(t, ((t)=>d((e)=>w(e) && e > t))(e))),\n        lte: (e)=>x(m(t, ((t)=>d((e)=>w(e) && e <= t))(e))),\n        gte: (e)=>x(m(t, ((t)=>d((e)=>w(e) && e >= t))(e))),\n        positive: ()=>x(m(t, d((t)=>w(t) && t > 0))),\n        negative: ()=>x(m(t, d((t)=>w(t) && t < 0)))\n    }), P = x(d(w)), T = u(d(function(t) {\n    return \"boolean\" == typeof t;\n})), k = u(d(function(t) {\n    return \"symbol\" == typeof t;\n})), B = u(d(function(t) {\n    return null == t;\n}));\nvar _ = {\n    __proto__: null,\n    matcher: t,\n    optional: l,\n    array: function(...e) {\n        return h({\n            [t]: ()=>({\n                    match: (t)=>{\n                        if (!Array.isArray(t)) return {\n                            matched: !1\n                        };\n                        if (0 === e.length) return {\n                            matched: !0\n                        };\n                        const n = e[0];\n                        let r = {};\n                        if (0 === t.length) return o(n).forEach((t)=>{\n                            r[t] = [];\n                        }), {\n                            matched: !0,\n                            selections: r\n                        };\n                        const i = (t, e)=>{\n                            r[t] = (r[t] || []).concat([\n                                e\n                            ]);\n                        };\n                        return {\n                            matched: t.every((t)=>s(n, t, i)),\n                            selections: r\n                        };\n                    },\n                    getSelectionKeys: ()=>0 === e.length ? [] : o(e[0])\n                })\n        });\n    },\n    set: function(...e) {\n        return u({\n            [t]: ()=>({\n                    match: (t)=>{\n                        if (!(t instanceof Set)) return {\n                            matched: !1\n                        };\n                        let n = {};\n                        if (0 === t.size) return {\n                            matched: !0,\n                            selections: n\n                        };\n                        if (0 === e.length) return {\n                            matched: !0\n                        };\n                        const r = (t, e)=>{\n                            n[t] = (n[t] || []).concat([\n                                e\n                            ]);\n                        }, i = e[0];\n                        return {\n                            matched: f(t, (t)=>s(i, t, r)),\n                            selections: n\n                        };\n                    },\n                    getSelectionKeys: ()=>0 === e.length ? [] : o(e[0])\n                })\n        });\n    },\n    map: function(...e) {\n        return u({\n            [t]: ()=>({\n                    match: (t)=>{\n                        if (!(t instanceof Map)) return {\n                            matched: !1\n                        };\n                        let n = {};\n                        if (0 === t.size) return {\n                            matched: !0,\n                            selections: n\n                        };\n                        const r = (t, e)=>{\n                            n[t] = (n[t] || []).concat([\n                                e\n                            ]);\n                        };\n                        if (0 === e.length) return {\n                            matched: !0\n                        };\n                        var i;\n                        if (1 === e.length) throw new Error(`\\`P.map\\` wasn't given enough arguments. Expected (key, value), received ${null == (i = e[0]) ? void 0 : i.toString()}`);\n                        const [o, c] = e;\n                        return {\n                            matched: g(t, (t, e)=>{\n                                const n = s(o, e, r), i = s(c, t, r);\n                                return n && i;\n                            }),\n                            selections: n\n                        };\n                    },\n                    getSelectionKeys: ()=>0 === e.length ? [] : [\n                            ...o(e[0]),\n                            ...o(e[1])\n                        ]\n                })\n        });\n    },\n    intersection: m,\n    union: y,\n    not: function(e) {\n        return u({\n            [t]: ()=>({\n                    match: (t)=>({\n                            matched: !s(e, t, ()=>{})\n                        }),\n                    getSelectionKeys: ()=>[],\n                    matcherType: \"not\"\n                })\n        });\n    },\n    when: d,\n    select: p,\n    any: S,\n    _: O,\n    string: E,\n    number: A,\n    bigint: P,\n    boolean: T,\n    symbol: k,\n    nullish: B,\n    instanceOf: function(t) {\n        return u(d(function(t) {\n            return (e)=>e instanceof t;\n        }(t)));\n    },\n    shape: function(t) {\n        return u(d(a(t)));\n    }\n};\nconst W = {\n    matched: !1,\n    value: void 0\n};\nfunction N(t) {\n    return new $(t, W);\n}\nclass $ {\n    constructor(t, e){\n        this.input = void 0, this.state = void 0, this.input = t, this.state = e;\n    }\n    with(...t) {\n        if (this.state.matched) return this;\n        const e = t[t.length - 1], r = [\n            t[0]\n        ];\n        let i;\n        3 === t.length && \"function\" == typeof t[1] ? i = t[1] : t.length > 2 && r.push(...t.slice(1, t.length - 1));\n        let o = !1, c = {};\n        const a = (t, e)=>{\n            o = !0, c[t] = e;\n        }, u = !r.some((t)=>s(t, this.input, a)) || i && !Boolean(i(this.input)) ? W : {\n            matched: !0,\n            value: e(o ? n in c ? c[n] : c : this.input, this.input)\n        };\n        return new $(this.input, u);\n    }\n    when(t, e) {\n        if (this.state.matched) return this;\n        const n = Boolean(t(this.input));\n        return new $(this.input, n ? {\n            matched: !0,\n            value: e(this.input, this.input)\n        } : W);\n    }\n    otherwise(t) {\n        return this.state.matched ? this.state.value : t(this.input);\n    }\n    exhaustive() {\n        if (this.state.matched) return this.state.value;\n        let t;\n        try {\n            t = JSON.stringify(this.input);\n        } catch (e) {\n            t = this.input;\n        }\n        throw new Error(`Pattern matching error: no pattern matches value ${t}`);\n    }\n    run() {\n        return this.exhaustive();\n    }\n    returnType() {\n        return this;\n    }\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ts-pattern/dist/index.js\n");

/***/ })

};
;